#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import subprocess
import os
import tempfile
import shutil

def test_nginx_config(config_file):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
    
    if not os.path.exists(config_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        return False
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            content = f.read()
        print(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
    checks = [
        ("listen", "listen 80;"),
        ("server_name", "server_name"),
        ("root", "root /usr/share/nginx/html;"),
        ("location /", "location / {"),
        ("location /api/", "location /api/ {"),
        ("gzip", "gzip on;"),
    ]
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤:")
    for name, directive in checks:
        if directive in content:
            print(f"‚úÖ {name}: –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå {name}: –ù–ï –Ω–∞–π–¥–µ–Ω–æ - {directive}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    problems = [
        ("must-revalidate –≤ gzip_proxied", "gzip_proxied.*must-revalidate"),
        ("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Cache-Control", 'add_header Cache-Control "must-revalidate"'),
    ]
    
    import re
    for name, pattern in problems:
        if re.search(pattern, content):
            print(f"‚ö†Ô∏è  {name}: –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞")
        else:
            print(f"‚úÖ {name}: OK")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å –ø–æ–º–æ—â—å—é nginx (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with tempfile.NamedTemporaryFile(mode='w', suffix='.conf', delete=False) as tmp:
            tmp.write(content)
            tmp_path = tmp.name
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        result = subprocess.run(
            ['nginx', '-t', '-c', tmp_path],
            capture_output=True,
            text=True
        )
        
        os.unlink(tmp_path)
        
        if result.returncode == 0:
            print("‚úÖ Nginx —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: OK")
            return True
        else:
            print(f"‚ùå Nginx —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ö†Ô∏è  nginx –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ nginx: {e}")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    config_files = [
        "nginx.conf",
        "default.conf",
        "frontend/nginx.conf",
        "frontend/default.conf"
    ]
    
    print("üîç –ü–æ–∏—Å–∫ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    found = False
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"üìÅ –ù–∞–π–¥–µ–Ω: {config_file}")
            test_nginx_config(config_file)
            found = True
            break
    
    if not found:
        print("‚ùå Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:", config_files)

if __name__ == "__main__":
    main() 