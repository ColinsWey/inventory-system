# =============================================================================
# КОНФИГУРАЦИЯ СИСТЕМЫ УПРАВЛЕНИЯ ТОВАРНЫМИ ОСТАТКАМИ
# =============================================================================
# Скопируйте этот файл в .env и заполните необходимые значения
# Никогда не коммитьте .env файл в репозиторий!

# =============================================================================
# ОСНОВНЫЕ НАСТРОЙКИ ПРИЛОЖЕНИЯ
# =============================================================================

# Версия приложения
APP_VERSION=1.0.0

# Окружение (development, staging, production)
FLASK_ENV=production

# Домен приложения (без http/https)
APP_DOMAIN=your-domain.com

# URL для React приложения (полный URL с протоколом)
REACT_APP_API_URL=https://your-domain.com

# =============================================================================
# БЕЗОПАСНОСТЬ
# =============================================================================

# Секретный ключ для Flask (генерируйте случайную строку 32+ символов)
# Команда для генерации: openssl rand -hex 32
SECRET_KEY=your-super-secret-key-here-32-chars-minimum

# Секретный ключ для JWT токенов (генерируйте случайную строку 32+ символов)
JWT_SECRET_KEY=your-jwt-secret-key-here-32-chars-minimum

# =============================================================================
# БАЗА ДАННЫХ POSTGRESQL
# =============================================================================

# Имя базы данных
POSTGRES_DB=inventory_db

# Пользователь базы данных
POSTGRES_USER=inventory_user

# Пароль базы данных (используйте сложный пароль!)
POSTGRES_PASSWORD=your-strong-database-password

# Хост базы данных (для Docker Compose используйте 'postgres')
POSTGRES_HOST=postgres

# Порт базы данных
POSTGRES_PORT=5432

# =============================================================================
# REDIS КЕШИРОВАНИЕ
# =============================================================================

# Пароль для Redis (используйте сложный пароль!)
REDIS_PASSWORD=your-strong-redis-password

# Хост Redis (для Docker Compose используйте 'redis')
REDIS_HOST=redis

# Порт Redis
REDIS_PORT=6379

# База данных Redis (0-15)
REDIS_DB=0

# =============================================================================
# ЛОГИРОВАНИЕ
# =============================================================================

# Уровень логирования (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Максимальный размер лог файла в MB
LOG_MAX_SIZE=10

# Количество ротируемых лог файлов
LOG_BACKUP_COUNT=5

# =============================================================================
# ИНТЕГРАЦИЯ С SALESDRIVE API
# =============================================================================

# API ключ для SalesDrive
SALESDRIVE_API_KEY=your-salesdrive-api-key

# URL API SalesDrive
SALESDRIVE_API_URL=https://api.salesdrive.ru/v1

# Таймаут запросов к API (в секундах)
SALESDRIVE_TIMEOUT=30

# =============================================================================
# EMAIL НАСТРОЙКИ (для уведомлений)
# =============================================================================

# SMTP сервер
SMTP_HOST=smtp.gmail.com

# SMTP порт
SMTP_PORT=587

# SMTP пользователь
SMTP_USER=your-email@gmail.com

# SMTP пароль
SMTP_PASSWORD=your-email-password

# Использовать TLS
SMTP_TLS=true

# Email отправителя
FROM_EMAIL=noreply@your-domain.com

# =============================================================================
# ФАЙЛОВОЕ ХРАНИЛИЩЕ
# =============================================================================

# Максимальный размер загружаемого файла в MB
MAX_UPLOAD_SIZE=100

# Разрешенные расширения файлов (через запятую)
ALLOWED_EXTENSIONS=csv,xlsx,xls,pdf,jpg,jpeg,png

# Путь для хранения загруженных файлов
UPLOAD_PATH=/app/uploads

# =============================================================================
# МОНИТОРИНГ И МЕТРИКИ
# =============================================================================

# Включить мониторинг Prometheus
ENABLE_MONITORING=true

# Порт для метрик Prometheus
METRICS_PORT=9090

# =============================================================================
# BACKUP НАСТРОЙКИ
# =============================================================================

# Расписание backup (cron формат)
BACKUP_SCHEDULE=0 2 * * *

# Количество дней хранения backup файлов
BACKUP_RETENTION_DAYS=30

# Путь для хранения backup файлов
BACKUP_PATH=/backups

# =============================================================================
# SSL СЕРТИФИКАТЫ
# =============================================================================

# Email для Let's Encrypt
LETSENCRYPT_EMAIL=admin@your-domain.com

# Использовать staging сервер Let's Encrypt (для тестирования)
LETSENCRYPT_STAGING=false

# =============================================================================
# ПРОИЗВОДИТЕЛЬНОСТЬ
# =============================================================================

# Количество worker процессов для Gunicorn
GUNICORN_WORKERS=4

# Тип worker процессов
GUNICORN_WORKER_CLASS=uvicorn.workers.UvicornWorker

# Таймаут worker процессов (в секундах)
GUNICORN_TIMEOUT=30

# Максимальное количество запросов на worker
GUNICORN_MAX_REQUESTS=1000

# =============================================================================
# КЕШИРОВАНИЕ
# =============================================================================

# Время жизни кеша в секундах
CACHE_TTL=3600

# Префикс для ключей кеша
CACHE_PREFIX=inventory:

# =============================================================================
# РАЗРАБОТКА (только для development окружения)
# =============================================================================

# Включить debug режим (ТОЛЬКО для разработки!)
DEBUG=false

# Включить автоперезагрузку при изменении кода
AUTO_RELOAD=false

# Показывать подробные ошибки
SHOW_ERRORS=false 