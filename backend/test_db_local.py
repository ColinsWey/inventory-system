#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É PostgreSQL.
"""

import os
import sys
import psycopg2
from sqlalchemy import create_engine, text

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
LOCAL_DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'database': 'inventory_system',
    'user': 'postgres',
    'password': 'postgres'
}

def test_local_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É PostgreSQL."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É PostgreSQL...")
    
    try:
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print(f"   Host: {LOCAL_DB_CONFIG['host']}")
        print(f"   Port: {LOCAL_DB_CONFIG['port']}")
        print(f"   Database: {LOCAL_DB_CONFIG['database']}")
        print(f"   User: {LOCAL_DB_CONFIG['user']}")
        print(f"   Password: {'*' * len(LOCAL_DB_CONFIG['password'])}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = psycopg2.connect(**LOCAL_DB_CONFIG)
        
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã PostgreSQL –≤–µ—Ä—Å–∏—è: {version[0]}")
        
        cursor.close()
        conn.close()
        return True
        
    except psycopg2.OperationalError as e:
        if "password authentication failed" in str(e):
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å PostgreSQL")
        elif "could not connect to server" in str(e):
            print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5432")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_database_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –ë–î
        config = LOCAL_DB_CONFIG.copy()
        config['database'] = 'postgres'
        
        conn = psycopg2.connect(**config)
        conn.autocommit = True
        
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
        cursor.execute(
            "SELECT 1 FROM pg_database WHERE datname = %s;",
            (LOCAL_DB_CONFIG['database'],)
        )
        
        exists = cursor.fetchone()
        
        if exists:
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{LOCAL_DB_CONFIG['database']}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{LOCAL_DB_CONFIG['database']}' –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"üí° –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(f"CREATE DATABASE {LOCAL_DB_CONFIG['database']};")
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{LOCAL_DB_CONFIG['database']}' —Å–æ–∑–¥–∞–Ω–∞")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        return False

def test_sqlalchemy_local():
    """–¢–µ—Å—Ç SQLAlchemy —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
    
    try:
        db_url = f"postgresql://{LOCAL_DB_CONFIG['user']}:{LOCAL_DB_CONFIG['password']}@{LOCAL_DB_CONFIG['host']}:{LOCAL_DB_CONFIG['port']}/{LOCAL_DB_CONFIG['database']}"
        print(f"üìã DATABASE_URL: {db_url}")
        
        engine = create_engine(db_url)
        
        with engine.connect() as connection:
            result = connection.execute(text("SELECT version();"))
            version = result.fetchone()
            
            print(f"‚úÖ SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã PostgreSQL –≤–µ—Ä—Å–∏—è: {version[0]}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLAlchemy: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PostgreSQL")
    print("=" * 50)
    
    success = True
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_local_connection():
        success = False
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL: https://www.postgresql.org/download/")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL —Å–µ—Ä–≤–∏—Å")
        print("   3. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'postgres' —Å –ø–∞—Ä–æ–ª–µ–º 'postgres'")
        print("   4. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ LOCAL_DB_CONFIG")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ë–î
    if not test_database_creation():
        success = False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º SQLAlchemy
    if not test_sqlalchemy_local():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–∏—Ç–µ config.py:")
        print(f"   DATABASE_HOST: 'localhost'")
        print(f"   DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/inventory_system'")
    else:
        print("üí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú!")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL")

if __name__ == "__main__":
    main() 