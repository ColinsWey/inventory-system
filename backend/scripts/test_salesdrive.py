#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SalesDrive API.
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from app.api.v1.services.salesdrive_service import SalesDriveClient, SalesDriveService
from app.api.v1.schemas.salesdrive import SalesDriveApiConfig
from app.core.config import settings


async def test_connection():
    """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SalesDrive API."""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SalesDrive API...")
    
    config = SalesDriveApiConfig(
        api_url=settings.SALESDRIVE_API_URL,
        api_key=settings.SALESDRIVE_API_KEY,
        timeout=30
    )
    
    try:
        async with SalesDriveClient(config) as client:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            response = await client.get_products(page=1, limit=1)
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {len(response.get('data', []))} —Ç–æ–≤–∞—Ä–æ–≤")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False


async def test_get_products():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤."""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...")
    
    config = SalesDriveApiConfig(
        api_url=settings.SALESDRIVE_API_URL,
        api_key=settings.SALESDRIVE_API_KEY,
        timeout=30
    )
    
    try:
        async with SalesDriveClient(config) as client:
            response = await client.get_products(page=1, limit=5)
            products = response.get('data', [])
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            for i, product in enumerate(products[:3], 1):
                print(f"  {i}. {product.get('name', 'N/A')} (SKU: {product.get('sku', 'N/A')})")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return False


async def test_get_orders():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤."""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤...")
    
    config = SalesDriveApiConfig(
        api_url=settings.SALESDRIVE_API_URL,
        api_key=settings.SALESDRIVE_API_KEY,
        timeout=30
    )
    
    try:
        async with SalesDriveClient(config) as client:
            date_from = datetime.utcnow() - timedelta(days=7)
            date_to = datetime.utcnow()
            
            response = await client.get_orders(
                date_from=date_from,
                date_to=date_to,
                page=1,
                limit=5
            )
            orders = response.get('data', [])
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {len(orders)}")
            
            for i, order in enumerate(orders[:3], 1):
                print(f"  {i}. –ó–∞–∫–∞–∑ #{order.get('number', 'N/A')} - {order.get('total_amount', 0)} —Ä—É–±.")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        return False


async def test_categories_and_suppliers():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
    print("\nüè∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")
    
    config = SalesDriveApiConfig(
        api_url=settings.SALESDRIVE_API_URL,
        api_key=settings.SALESDRIVE_API_KEY,
        timeout=30
    )
    
    try:
        async with SalesDriveClient(config) as client:
            # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            try:
                categories_response = await client.get_categories()
                categories = categories_response.get('data', [])
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                
                for i, category in enumerate(categories[:3], 1):
                    print(f"  {i}. {category.get('name', 'N/A')}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            
            # –¢–µ—Å—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            try:
                suppliers_response = await client.get_suppliers()
                suppliers = suppliers_response.get('data', [])
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(suppliers)}")
                
                for i, supplier in enumerate(suppliers[:3], 1):
                    print(f"  {i}. {supplier.get('name', 'N/A')}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {e}")
            
            return True
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


async def test_rate_limiting():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤."""
    print("\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    
    config = SalesDriveApiConfig(
        api_url=settings.SALESDRIVE_API_URL,
        api_key=settings.SALESDRIVE_API_KEY,
        timeout=30
    )
    
    try:
        async with SalesDriveClient(config) as client:
            start_time = datetime.utcnow()
            
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            for i in range(3):
                await client.get_products(page=1, limit=1)
                print(f"  –ó–∞–ø—Ä–æ—Å {i+1} –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            end_time = datetime.utcnow()
            duration = (end_time - start_time).total_seconds()
            
            print(f"‚úÖ 3 –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            if duration >= 2.0:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã —Å rate limiting
                print("‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è Rate limiting –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting: {e}")
        return False


def print_config_info():
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SalesDrive:")
    print(f"  API URL: {settings.SALESDRIVE_API_URL}")
    print(f"  API Key: {settings.SALESDRIVE_API_KEY[:20]}...")
    print(f"  Timeout: {settings.SALESDRIVE_TIMEOUT}s")
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SalesDrive API")
    print("=" * 60)
    
    print_config_info()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", test_connection),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤", test_get_products),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤", test_get_orders),
        ("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏", test_categories_and_suppliers),
        ("Rate limiting", test_rate_limiting),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SalesDrive —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏.")
        return 1


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not settings.SALESDRIVE_API_KEY or settings.SALESDRIVE_API_KEY == "your_api_key_here":
        print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á SalesDrive –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SALESDRIVE_API_KEY –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ config.py")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 