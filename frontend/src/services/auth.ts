import api from './api';
import { User, LoginRequest, AuthTokens, ApiResponse } from '../types';

export const authService = {
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async login(credentials: LoginRequest): Promise<AuthTokens> {
    console.log('üîê authService.login() –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', credentials);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –≤–º–µ—Å—Ç–æ FormData
    const loginData = {
      username: credentials.username,
      password: credentials.password
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –¥–∞–Ω–Ω—ã–µ:', loginData);

    const response = await api.post<AuthTokens>('/auth/login', loginData);
    
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ access_token (refresh_token –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    localStorage.setItem('access_token', response.data.access_token);
    if (response.data.refresh_token) {
      localStorage.setItem('refresh_token', response.data.refresh_token);
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω refresh_token');
    } else {
      console.log('‚ö†Ô∏è refresh_token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ');
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return response.data;
  },

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    console.log('üö™ authService.logout() –≤—ã–∑–≤–∞–Ω');
    try {
      await api.post('/auth/logout');
      console.log('‚úÖ Logout –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ logout –∑–∞–ø—Ä–æ—Å–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º):', error);
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ localStorage
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      console.log('üóëÔ∏è –¢–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ localStorage');
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getCurrentUser(): Promise<User> {
    console.log('üë§ authService.getCurrentUser() –≤—ã–∑–≤–∞–Ω');
    const response = await api.get<any>('/auth/me');
    console.log('üì• –û—Ç–≤–µ—Ç /auth/me:', response.data);
    
    // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ª–µ user, –∞ –Ω–µ data.data
    const user = response.data.user || response.data;
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    return user;
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshToken(): Promise<AuthTokens> {
    const refreshToken = localStorage.getItem('refresh_token');
    if (!refreshToken) {
      throw new Error('Refresh token not found');
    }

    const response = await api.post<AuthTokens>('/auth/refresh', {
      refresh_token: refreshToken,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage
    localStorage.setItem('access_token', response.data.access_token);
    localStorage.setItem('refresh_token', response.data.refresh_token);

    return response.data;
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated(): boolean {
    const token = localStorage.getItem('access_token');
    return !!token;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  getToken(): string | null {
    return localStorage.getItem('access_token');
  },
}; 