#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π frontend –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

const fs = require('fs');
const path = require('path');

function checkFile(filePath, checks) {
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${filePath}`);
    
    if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return false;
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    let allPassed = true;
    
    checks.forEach(check => {
        if (check.shouldContain) {
            if (content.includes(check.shouldContain)) {
                console.log(`‚úÖ ${check.description}`);
            } else {
                console.log(`‚ùå ${check.description}`);
                console.log(`   –û–∂–∏–¥–∞–ª–∏ –Ω–∞–π—Ç–∏: ${check.shouldContain}`);
                allPassed = false;
            }
        }
        
        if (check.shouldNotContain) {
            if (!content.includes(check.shouldNotContain)) {
                console.log(`‚úÖ ${check.description}`);
            } else {
                console.log(`‚ùå ${check.description}`);
                console.log(`   –ù–ï –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: ${check.shouldNotContain}`);
                allPassed = false;
            }
        }
    });
    
    return allPassed;
}

function runTests() {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô FRONTEND –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò');
    console.log('=' * 60);
    
    let allTestsPassed = true;
    
    // –¢–µ—Å—Ç 1: API URL –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    const apiTests = checkFile('src/services/api.ts', [
        {
            description: 'API URL –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä',
            shouldContain: 'http://78.128.99.7:8000/api/v1',
            shouldNotContain: 'http://localhost:8000/api/v1'
        }
    ]);
    allTestsPassed = allTestsPassed && apiTests;
    
    const clientTests = checkFile('src/api/client.ts', [
        {
            description: 'Client API URL –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä',
            shouldContain: 'http://78.128.99.7:8000/api/v1',
            shouldNotContain: 'http://localhost:8000/api/v1'
        }
    ]);
    allTestsPassed = allTestsPassed && clientTests;
    
    // –¢–µ—Å—Ç 2: Auth service –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    const authTests = checkFile('src/services/auth.ts', [
        {
            description: 'FormData —É–¥–∞–ª–µ–Ω –∏–∑ login()',
            shouldNotContain: 'new FormData()'
        },
        {
            description: 'multipart/form-data —É–¥–∞–ª–µ–Ω',
            shouldNotContain: 'multipart/form-data'
        },
        {
            description: 'JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è',
            shouldContain: 'const loginData = {'
        },
        {
            description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ login()',
            shouldContain: 'console.log(\'üîê authService.login() –≤—ã–∑–≤–∞–Ω'
        },
        {
            description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω getCurrentUser()',
            shouldContain: 'response.data.user || response.data'
        },
        {
            description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ getCurrentUser()',
            shouldContain: 'console.log(\'üë§ authService.getCurrentUser() –≤—ã–∑–≤–∞–Ω'
        }
    ]);
    allTestsPassed = allTestsPassed && authTests;
    
    // –¢–µ—Å—Ç 3: AuthContext –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    const contextTests = checkFile('src/contexts/AuthContext.tsx', [
        {
            description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ reducer',
            shouldContain: 'console.log(\'üîÑ AuthContext reducer:'
        },
        {
            description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ login()',
            shouldContain: 'console.log(\'üîê AuthContext.login() –≤—ã–∑–≤–∞–Ω'
        }
    ]);
    allTestsPassed = allTestsPassed && contextTests;
    
    // –¢–µ—Å—Ç 4: API –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    const interceptorTests = checkFile('src/services/api.ts', [
        {
            description: '–£–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ refresh token',
            shouldNotContain: 'auth/refresh'
        },
        {
            description: '–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 401 –æ—à–∏–±–æ–∫',
            shouldContain: 'console.log(\'‚ùå 401 –æ—à–∏–±–∫–∞'
        }
    ]);
    allTestsPassed = allTestsPassed && interceptorTests;
    
    console.log('\n' + '=' * 60);
    if (allTestsPassed) {
        console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
        console.log('‚úÖ API URL –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä (78.128.99.7:8000)');
        console.log('‚úÖ FormData –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ JSON –≤ login()');
        console.log('‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç refresh_token');
        console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω endpoint getCurrentUser()');
        console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
        console.log('\nüí° Frontend –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –≤–Ω–µ—à–Ω–∏–º backend!');
        console.log('üîß –û—Ç–∫—Ä–æ–π—Ç–µ DevTools Console –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } else {
        console.log('üí• –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò!');
        console.log('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
try {
    runTests();
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error.message);
    process.exit(1);
} 