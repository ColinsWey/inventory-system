#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ backend –º–æ–¥—É–ª–µ–π
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

def test_import(module_name, description):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è"""
    try:
        __import__(module_name)
        print(f"‚úÖ {description}: {module_name}")
        return True
    except Exception as e:
        print(f"‚ùå {description}: {module_name} - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ backend –º–æ–¥—É–ª–µ–π")
    print("=" * 60)
    
    tests = [
        ("app.main", "–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å"),
        ("app.core.config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("app.core.database.connection", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"),
        ("app.core.database.init_db", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"),
        ("app.api.v1.router", "–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä"),
        ("app.api.v1.dependencies", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"),
        ("app.api.v1.endpoints.auth", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        ("app.api.v1.endpoints.products", "–¢–æ–≤–∞—Ä—ã"),
        ("app.api.v1.endpoints.categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        ("app.api.v1.endpoints.sales", "–ü—Ä–æ–¥–∞–∂–∏"),
        ("app.api.v1.endpoints.forecasts", "–ü—Ä–æ–≥–Ω–æ–∑—ã"),
        ("app.api.v1.services.auth_service", "–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"),
        ("app.api.v1.services.product_service", "–°–µ—Ä–≤–∏—Å —Ç–æ–≤–∞—Ä–æ–≤"),
        ("app.features.analytics.router", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
        ("app.features.inventory.router", "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        ("app.features.integration.router", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"),
    ]
    
    success_count = 0
    
    for module_name, description in tests:
        if test_import(module_name, description):
            success_count += 1
    
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(tests)} –º–æ–¥—É–ª–µ–π")
    
    if success_count == len(tests):
        print("üéâ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏")

if __name__ == "__main__":
    main() 